console.log("signin js");
$(document).ready(function() {
  setSSUserDetails();
  var userInfoSeesion = sessionStorage.getItem(ssUserInfoMd5);
  if (userInfoSeesion == null || userInfoSeesion == "" || userInfoSeesion == undefined) {
    //  document.getElementById("sign-in-firstname").innerHTML = 'Sign In/Sign Up';
    console.log("Updated js");
    document.getElementById("signin").style.display = "inline-block";
    document.getElementById("userloggedIn").style.display = "none";
  } else if (userInfoSeesion != null || userInfoSeesion != "" || userInfoSeesion != undefined) {
    console.log("signin cookie is not null");
    document.getElementById("userloggedIn").style.display = "inline-block";
    document.getElementById("signin").style.display = "none";
    var information = JSON.parse(userInfoSeesion);
    var firstname = information.firstName;
    const lastName = information.lastName;
    var userId = information.userId;
    var userRole = information.userRole;
    $(".userRole").val(userRole);  
    const element = document.getElementById("sign-in-firstname");
    if (userRole == "Company/LLP") {
      if (userId != null || userId != "" || userId != "undefined") {
        element.innerHTML = "Hello " + userId;
      }
    } else {
      if (firstname != null || firstname != "" || firstname != "undefined") {
		if (firstname === ".") element.innerHTML = "Hello " + lastName;
       else element.innerHTML = "Hello " + firstname;
      }
    }
  }

    $(".profileUpdateButton").click(function() {
     if($(".userRole").val() == $(".externalAgencyText").val()){
		$('#externalAgencyNotification').modal('toggle');
     } else{
		window.location.href = $(".profilePagePath").val();
     }
  });  

  //logout functionality
  $(".removeCookies").click(function() {
    document.getElementById("signin").style.display = "inline-block";
    document.getElementById("userloggedIn").style.display = "none";
  });

  $(".logoutIcon").click(function(e) {
    e.stopPropagation();
  });
});

const ssUserInfoMd5 = "userInfoMd5";
const ssDMSIDfolderpath = "folderpath";
const ssDMSIDDMSfolder = "dmsfolder";

class LoggedInUserDetails {
    constructor() {
        this.userId = null;
        this.userRole = null;
        this.firstName = null;
        this.lastName = null;
        this.middleName = null;
        this.emailId = null;
        this.mobile = null;
        this.userCategory = null;
        this.isLoggedIn = null;
        this.getLoggedInUserDetails();
    }

    getLoggedInUserDetails() {
        const settings = {
            "async": false,
            "crossDomain": true,
            "url": "/bin/mca/loggedInUserDetails",
            "method": "GET",
            "headers": {},
            "processData": false,
            "contentType": false,
            "mimeType": "multipart/form-data",
        };

        $.ajax(settings).done((response) => {
            var parsedResponse = JSON.parse(response);
            this.isLoggedIn = parsedResponse.resCode === "200" ? true : false;
            if (parsedResponse.resCode === "200") {
                this.userId = parsedResponse.userId;
                this.userRole = parsedResponse.userRole.replaceAll("\"", "");
                this.firstName = parsedResponse.firstName.replaceAll("\"", "");
                this.lastName = parsedResponse.lastName.replaceAll("\"", "");
                this.middleName = parsedResponse.middleName.replaceAll("\"", "");
                this.emailId = parsedResponse.emailId.replaceAll("\"", "");
                this.mobile = parsedResponse.mobile.replaceAll("\"", "");
                this.userCategory = parsedResponse.userCategory.replaceAll("\"", "");
            }
        });
    }

    getUserId() {
        return this.userId;
    }

    getUserRole() {
        return this.userRole;
    }

    getFirstName() {
        return this.firstName;
    }

    getLastName() {
        return this.lastName;
    }

    getMiddleName() {
        return this.middleName;
    }

    getEmailId() {
        return this.emailId;
    }

    getMobile() {
        return this.mobile;
    }

    getUserCategory() {
        return this.userCategory;
    }

    isLoggedIn() {
        return this.isLoggedIn;
    }
}

function setSSUserDetails() {
    debugger;
    console.log("setSS_UserDetails::START.");
    var loggedInUserDetails = new LoggedInUserDetails();

    if (loggedInUserDetails.isLoggedIn) {
        var loggedInDetailsForSession = {
            "userId": loggedInUserDetails.getUserId(),
            "userRole": loggedInUserDetails.getUserRole(),
            "firstName": loggedInUserDetails.getFirstName(),
            "lastName": loggedInUserDetails.getLastName(),
            "middleName": loggedInUserDetails.getMiddleName(),
            "email": loggedInUserDetails.getEmailId(),
            "mobile": loggedInUserDetails.getMobile()
        };
        sessionStorage.setItem(ssUserInfoMd5, JSON.stringify(loggedInDetailsForSession));
        console.log("setSS_UserDetails setItem::End.");
    } else {
	    sessionStorage.removeItem(ssUserInfoMd5);
	    console.log("setSS_UserDetails removeItem::End.");
    }
}

function removeSSUserDetails() {
    debugger;
    console.log("removeSS_UserDetails::START.");
    sessionStorage.removeItem(ssUserInfoMd5);
    console.log("removeSS_UserDetails::End.");
}

function isProfessionalUserRole(userRole) {
    debugger;
    console.log("isProfessionalUserRole::START.");
    if (userRole === "Professional" || userRole === "Professional Staff Member") {
        console.log("isProfessionalUserRole::TRUE");
        return true;
    } else {
        return false;
    }
    console.log("isProfessionalUserRole::End.");
}

function createV3OfflineLogin() {
	var status = false;
	const settings = {
		"async": false,
		"crossDomain": true,
		"url": "/bin/mca/login-offline",
		"method": "POST",
		"headers": {},
		"processData": false,
		"contentType": false,
		"mimeType": "multipart/form-data",
	};

	$.ajax(settings).done((response) => {
		var parsedResponse = JSON.parse(response);
		console.log("parsedResponse.resCode::"+parsedResponse.resCode);
		console.log("parsedResponse.hasOfflineLogin::"+parsedResponse.hasOfflineLogin);
		if (parsedResponse.resCode === "200" && parsedResponse.hasOfflineLogin) {
			console.log("Login for Offline successful");
			status = true;
		} else if (parsedResponse.resCode === "205") {
			console.log("Login for Offline failed");
		} else if (parsedResponse.resCode === "220") {
			console.log("Login for Offline failed with exception");
		} else {
			console.log("Login for Offline failed with error's");
		}
	});
	return status;
}

function removeSSDMSIds() {
    debugger;
    console.log("removeSSDMSIds::START.");
    sessionStorage.removeItem(ssDMSIDfolderpath);
    sessionStorage.removeItem(ssDMSIDDMSfolder);
    console.log("removeSSDMSIds::End.");
}
